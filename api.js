var express = require('express');
var mongoose = require('mongoose');
var bodyParser = require('body-parser');
var router = express.Router();

// Mongoose Schemas
var Schema = mongoose.Schema;
var ObjectId =  Schema.ObjectId;

// Todo List Schema
var todoSchema = new Schema({
  todoName : String,
  todoDescription : String,
  tasks : [{
    taskName : String,
    taskDescription : String,
    taskDeadline : Date,
    taskStatus : String
  }]
});
var todoList   = mongoose.model('todolist', todoSchema);

// Task Schema
var taskSchema = new Schema({
  todoId : { type : ObjectId, ref : 'todolist'},
  taskName : String,
  taskDescription : String,
  taskDeadline : Date,
  taskStatus : String
});
var task   = mongoose.model('task', taskSchema);

//Define url parameters
router.param('todoListId', function (req, res, next, id) {
  next();
});
router.param('taskId', function (req, res, next, id) {
  next();
});

router.get('/', function(req, res, next) {
  var titleString  =  "TodoAPI"
  res.render('api', { title: titleString});
});


// Enter test data quickly
router.post('/test/', function(req, res, next){
  var randomStr = function(len){
    var str = "";
    var charString = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
    var charArray = charString.split("");
    for (var i = 0; i < len; i++) {
      randomIndex = Math.floor( (Math.random() * charArray.length) )
      str += charArray[randomIndex];
    }
    return str;
  }

  var testList = new todoList()
  testList.todoName = "Test Todo List ("+randomStr(7)+")";
  testList.todoDescription = "This Todo List was randomly generated by sending a POST request to /api/test/";
  testList.tasks = []
  var taskNum = 3 + Math.floor( (Math.random() * 10) )

  for (var i = 0; i < taskNum; i++) {
    var taskObj = {};
    taskObj.taskName = "Test Task ("+randomStr(4)+")";
    taskObj.taskDescription = "This task was generated randomly as test data";
    taskObj.taskDeadline = "Sun, 13 Sep 2015 15:00:00 +0200"
    taskObj.taskStatus = "incomplete";
    testList.tasks.push(taskObj)
  }

  testList.save()
  .then(function(doc){
    res.send(doc);
  })
});

send404 = function(res, property, attempt){
  err = new Error()
  err.status  = 404;
  err.message = property+" '"+attempt+"' not Found";
  res.send(err);
}

getList = function(res, query){
  queryObj = query || {};
  todoList.find(query)
  .then(  function(doc){ res.send(doc) })
  .catch( function(err){ res.send(err) })
}
editList = function(req, res, list){
  list.todoName = req.body.todoName || list.todoName || "Todo List"
  list.todoDescription = req.body.todoDescription || list.todoDescription || ""
  list.tasks = list.tasks || []
  list.save()
}
modifyTask = function(req, res, list, taskId, deleteTask){
  if(!taskId){
    var taskObj = {}
    taskObj.taskName          = req.body.taskName         || "Task"
    taskObj.taskDescription   = req.body.taskDescription  || ""
    taskObj.taskDeadline      = req.body.taskDeadline     || ""
    taskObj.taskStatus        = req.body.taskStatus       || "incomplete"
    list.tasks.push(taskObj)
    list.save()
    .then(  function(doc){ res.send(doc.tasks[doc.tasks.length-1]) })
  } else {
    for (var i = 0; i < list.tasks.length; i++) {
      if(list.tasks[i]._id == taskId){
        if(deleteTask){
          list.tasks.splice(i, 1);
        } else {
          list.tasks[i].taskName        = req.body.taskName        || list.tasks[i].taskName
          list.tasks[i].taskDescription = req.body.taskDescription || list.tasks[i].taskDescription
          list.tasks[i].taskDeadline    = req.body.taskDeadline    || list.tasks[i].taskDeadline
          list.tasks[i].taskStatus      = req.body.taskStatus      || list.tasks[i].taskStatus
        }
        list.save()
        .then(  function(doc){
          deleteTask ? res.sendStatus(200) : res.send(doc.tasks[i]) 
        })
        break;
      }
    }
  }
}

//read all todo lists (will probably be removed or replaced with user-specific todo lists)
router.get('/todo/', function(req, res) {
  getList(res)
});

//Get a todo list and get its associated tasks
router.get('/todo/:todoListId', function(req, res, next) {
  var todoListId = req.params.todoListId;
  var query = {'_id' : todoListId }
  mongoose.Types.ObjectId.isValid( todoListId ) ? getList(res, query) : send404(res, "Todo List", todoListId);
});

//create a new todo list
router.post('/todo/', function(req, res, next) {
  var newTodoList = new todoList()
  editList(req, res, newTodoList)
});

//create a task associated with the todo list in the URL
router.post('/todo/:todoListId/task', function(req, res, next) {
  var todoListId = req.params.todoListId;
  var createTask = function(){
    todoList.findOne({'_id' : todoListId})
    .then(  function(doc){ modifyTask(req, res, doc) })
  }
  mongoose.Types.ObjectId.isValid(todoListId) ? createTask() : send404(res, "Todo List", todoListId)
});

//update a todo list's details
router.put('/todo/:todoListId', function(req, res, next) {
  var todoListId = req.params.todoListId;
  var updateList = function(){
    todoList.findOne({ '_id' : todoListId })
    .then(  function(doc){ editList(req, res, doc) })
  }
  mongoose.Types.ObjectId.isValid(todoListId) ? updateList() : send404(res, "Todo List", todoListId)
});

// update a task within a specified todo list
router.put('/todo/:todoListId/task/:taskId', function(req, res, next) {
  var todoListId  = req.params.todoListId
  var taskId      = req.params.taskId;
  var updateListTask = function(){
    todoList.findOne({ '_id' : todoListId })
    .then(  function(doc){ modifyTask(req, res, doc, taskId) })
  }
  if(mongoose.Types.ObjectId.isValid(todoListId)){
    mongoose.Types.ObjectId.isValid(taskId) ? updateListTask() : send404(res, "Task", taskId)
  } else {
    send404(res, "Todo List", todoListId)
  }
});

// Delete task within a specified todo list
router.delete('/todo/:todoListId/task/:taskId', function(req, res, next) {
  var todoListId  = req.params.todoListId
  var taskId      = req.params.taskId
  var updateListTask = function(){
    todoList.findOne({ '_id' : todoListId })
    .then(  function(doc){ modifyTask(req, res, doc, taskId, true) })
  }
  if(mongoose.Types.ObjectId.isValid(todoListId)){
    mongoose.Types.ObjectId.isValid(taskId) ? updateListTask() : send404(res, "Task", taskId)
  } else {
    send404(res, "Todo List", todoListId)
  }
});

//delete a todo list and all tasks associated with it.
router.delete('/todo/:todoListId', function(req, res, next) {
  deleteId = req.params.todoListId;
  mongoose.Types.ObjectId.isValid(deleteId) ? todoList.remove({'_id' : deleteId}).then(function(doc){res.sendStatus(200)}) : send404(res, "Todo List", deleteId)
});


module.exports = router;
